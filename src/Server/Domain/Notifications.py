#!/usr/bin/python3
# -*- coding: utf-8; mode: python -*-

# BSC Thesis
#
# Author
#  - José Ángel Martín Baos

from ServerConfig import *
from Persistence.DBBroker import DBBroker
import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText

class Notifications:
    """ Manage the notifications"""

    def getNotifications(self):
        """
        Get all the email notifications.

        Output:   notifications -> List with all the notifications stored.
        """
        db = DBBroker()
        sql = "SELECT * FROM notifications "
        notifications = db.select(sql)
        return notifications


    def createNotification(self, email, CO_level, LPG_level, vehicles):
        """
        Create a new notification.

        Input:   email -> Notification email
                 CO_level -> CO notification level
                 LPG_level -> LPG notification level
                 vehicles -> vehicles per hour notification level
        """
        db = DBBroker()
        sql = "INSERT INTO notifications(email, COLimit, LPGLimit, vehiclesLimit) \
                VALUES ('%s', %s, %s, %s)" % \
                (email, CO_level, LPG_level, vehicles)
        db.update(sql)


    def removeNotification(self, email):
        """
        Remove an existing notification.

        Input:   email -> Notification email
        """
        db = DBBroker()
        sql = "DELETE FROM notifications \
                WHERE email = '%s'" % (email)
        db.update(sql)



    def updateNotification(self, email, CO_level, LPG_level, vehicles):
        """
        Update and existing notifications.

        Input:   email -> Notification email
                 CO_level -> CO notification level
                 LPG_level -> LPG notification level
                 vehicles -> vehicles per hour notification level
        """
        db = DBBroker()
        sql = "UPDATE notifications \
                SET COLimit =  %s, LPGLimit =  %s, vehiclesLimit =  %s \
                WHERE email = '%s'" % \
                (CO_level, LPG_level, vehicles, email)
        db.update(sql)


    def checkNotifications(self, devices, data):
        """
        Check if the input data triggers any existing notifications.

        Input:   data -> Sensor data obtained from the devices
        """
        notifications = self.getNotifications()
        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)
        server.starttls()
        server.login(NOTIFY_EMAIL, NOTIFY_PASS)

        for notification in notifications:
            count = 0
            for device in devices:
                if device['idDevice'] == data['idDevice']:
                    location = device['Location']
                    break

            msg = MIMEMultipart()
            destination_addr = notification['email']
            msg['From'] = NOTIFY_EMAIL
            msg['To'] = destination_addr
            msg['Subject'] = "Level alert! - Jose Angel BSc. Thesis"

            body = "This is an automated message generated by the Jose Angel BSc. Thesis \
                webpage to inform you that some levels stored for your account in the \
                Notification system of the app have been gotten over by the device with \
                id: %d, and located in %s <br><br> <ul>" % (data['idDevice'], location)

            if notification['COLimit'] != None and data['CO'] > notification['COLimit']:
                count += 1
                body += "<li>The CO gas limit has been gotten over!<br> \
                    \t Current CO gas ppm: %.2f <br> \
                    \t Notification CO gas ppm limit: %.2f </li> <br><br>" % (data['CO'], notification['COLimit'])
            if notification['LPGLimit'] != None and data['LPG_gas'] > notification['LPGLimit']:
                count += 1
                body += "<li>The LPG limit has been gotten over!<br> \
                    \t Current LPG ppm: %.2f <br> \
                    \t Notification LPG ppm limit: %.2f </li> <br><br>" % (data['LPG'], notification['LPGLimit'])
            if notification['vehiclesLimit'] != None and data['car_count'] > notification['vehiclesLimit']:
                count += 1
                body += "<li>The vehicles per hour limit has been gotten over! <br> \
                    \t Current vehicles per hour: %.2f <br> \
                    \t Notification vehicles per hour: %.2f </li> <br><br>" % (data['car_count'], notification['vehiclesLimit'])

            body += "This is just an informative email, please do not respond to it."

            if count > 0:
                msg.attach(MIMEText(body, 'html', 'utf-8'))
                text = msg.as_string().encode('ascii')
                # Sent the email
                server.sendmail(NOTIFY_EMAIL, destination_addr, text)

        server.quit()
