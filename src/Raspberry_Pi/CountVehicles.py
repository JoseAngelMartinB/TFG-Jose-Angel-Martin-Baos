#!/usr/bin/python3
# -*- coding: utf-8; mode: python -*-

# BSC Thesis
#
# Author
#  - José Ángel Martín Baos

from config import *
import picamera.array
import sys
import numpy as np
import time
import threading

class CountVehicles():
    """Count the number of vehicles that are recorded by the cammera."""

    def __init__(self):
        self.lock = threading.Lock()
        self.n_vehicles = [0, 0] # (vehicles going to left, vehicles going to right)
        self.mv = []         # List with all the motion vectors in the past frames,
                             # each element contained is of the form (n vectors to left, n vectors to right)
        self.smooth_mv = []  # List with all the motion vectors in the past frames after smoothing
        self.car_detected = [False, False]
        self.growth = [0, 0]
        self.n_positive_frames = [0, 0]
        self.buff_size = 0


    def count(self, motion_data):
        """
        Count the number of vehicles that are going through the camera.

        Input:   motion_data -> Motion data array generated by the camera.
        """
        if self.buff_size < BUFFER_SIZE:
            self.buff_size += 1
        else:
            self.mv.pop(0)
            self.smooth_mv.pop(0)

        # Count number of vectors going to left or right
        self.mv.append([(motion_data['x'] > GROUP_SENSITIVITY).sum(),
                    (motion_data['x'] < -GROUP_SENSITIVITY).sum()])

        # Smoothing. Applies Moving averages to smooth the number of motion vectors
        tmp_left = 0
        tmp_right = 0
        for i in range(0, SMOOTH_ORDER):
            if i > self.buff_size: i = 0
            tmp_left += self.mv[-i][0]
            tmp_right += self.mv[-i][1]
        self.smooth_mv.append([tmp_left//SMOOTH_ORDER, tmp_right//SMOOTH_ORDER])

        directions = ["Left", "Right"]
        if self.buff_size > 2:
            for direction in range(0,2):
                if self.smooth_mv[-2][direction] < self.smooth_mv[-1][direction] and self.growth[direction] < GROWTH_LIMIT:
                    self.growth[direction] += 1
                elif self.smooth_mv[-2][direction] > self.smooth_mv[-1][direction] and self.growth[direction] > -GROWTH_LIMIT:
                    self.growth[direction] -= 1

                if self.smooth_mv[-1][direction] >= HEIGHT_THRESHOLD and self.growth[direction] > 0:
                    self.n_positive_frames[direction] += 1
                    if self.n_positive_frames[direction] >= WIDTH_THRESHOLD and self.car_detected[direction] == False:
                        self.car_detected[direction] = True
                        self.lock.acquire()
                        self.n_vehicles[direction] += 1
                        self.lock.release()
                        print("Car detected!!! - Direction: %s" % directions[direction]) # Debug info
                        sys.stdout.flush()
                elif self.growth[direction] == -GROWTH_LIMIT:
                    self.car_detected[direction] = False
                    self.n_positive_frames[direction] = 0


    def getVehicles(self):
        """
        Obtain the current number of vehicles and reset to default value.
        """
        self.lock.acquire()
        current_vehicles = self.n_vehicles
        self.n_vehicles = [0, 0]
        self.lock.release()
        vehicles = sum(current_vehicles)

        return vehicles
